import pygame
import numpy as np
import math
import sys
import webbrowser
from pygame.locals import *

# Initialize Pygame
pygame.init()

# Constants
WIDTH, HEIGHT = 1400, 900
CENTER_X, CENTER_Y = WIDTH // 2, HEIGHT // 2
LENS_RADIUS = 100
SNAP_ANGLES = [0, 30, 45, 60, 90, 120, 135, 150, 180, 210, 225, 240, 270, 300, 315, 330, 360]
SNAP_THRESHOLD = 5

# Colors
BACKGROUND = (10, 20, 30)
PANEL_BG = (20, 35, 50)
TEXT_COLOR = (220, 230, 240)
MEDICAL_GREEN = (100, 255, 150)
NEURAL_BLUE = (100, 200, 255)
RETINA_ORANGE = (255, 150, 50)
HIGHLIGHT = (0, 200, 255)

screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Low Retina Count Vision Enhancement System - Neural Pathway Optimization")

font = pygame.font.SysFont('consolas', 12)
title_font = pygame.font.SysFont('consolas', 14, bold=True)
header_font = pygame.font.SysFont('consolas', 16, bold=True)

# Manufacturer database
MANUFACTURERS = {
    "Johnson & Johnson Vision": {
        "url": "https://www.jnjvision.com",
        "specialty": "Medical-grade contact lenses",
        "materials": ["Silicone Hydrogel", "Acuvue Oasys"],
        "contact": "medicalinquiries@jnjvision.com"
    },
    "Alcon Laboratories": {
        "url": "https://www.alcon.com",
        "specialty": "Advanced ocular devices",
        "materials": ["Dailies Total1", "Air Optix"],
        "contact": "research@alcon.com"
    },
    "Bausch + Lomb": {
        "url": "https://www.bausch.com",
        "specialty": "Vision enhancement technology",
        "materials": ["PureVision", "BioTrue"],
        "contact": "innovation@bausch.com"
    },
    "Staar Surgical": {
        "url": "https://www.staar.com",
        "specialty": "Implantable lenses",
        "materials": ["EVO ICL", "Collamer"],
        "contact": "research@staar.com"
    },
    "Novartis Vision": {
        "url": "https://www.novartis.com",
        "specialty": "Neuro-adaptive optics",
        "materials": ["Focus Night&Day", "Precision1"],
        "contact": "visionresearch@novartis.com"
    }
}

class LowRetinaVisionEnhancer:
    def __init__(self, x, y, radius):
        self.x = x
        self.y = y
        self.radius = radius
        self.retina_density = 15  # Percentage of normal retina cells
        self.neural_pathways = "INTACT"
        self.enhancement_mode = "CONTRAST_ENHANCEMENT"
        self.auto_rotation_speeds = [0.5, 1.0, 2.0]  # Three different speeds
        self.current_speed_index = 1
        self.rotation_angles = [0, 120, 240]  # Triple-angle output
        self.layer_configurations = [
            {"angles": [0, 45, 90], "purpose": "Maximum Contrast"},
            {"angles": [30, 90, 150], "purpose": "Motion Enhancement"}, 
            {"angles": [0, 120, 240], "purpose": "Neural Stimulation"},
            {"angles": [45, 135, 225], "purpose": "Edge Detection"}
        ]
        
    def calculate_vision_improvement(self, polarization_efficiency):
        """Calculate vision improvement based on retina count and neural pathways"""
        base_improvement = polarization_efficiency * 2.0  # Neural amplification
        if self.retina_density < 20:
            neural_boost = 3.0  # Higher boost for low retina count
        else:
            neural_boost = 1.5
            
        return min(400, base_improvement * neural_boost)  # Cap at 400% improvement
    
    def get_triple_angles(self):
        """Return three optimized angles for current enhancement mode"""
        if self.enhancement_mode == "CONTRAST_ENHANCEMENT":
            return [0, 60, 120]
        elif self.enhancement_mode == "MOTION_DETECTION":
            return [30, 90, 150]
        elif self.enhancement_mode == "NEURAL_STIMULATION":
            return [0, 120, 240]
        else:  # EDGE_DETECTION
            return [45, 135, 225]
    
    def draw(self, surface):
        # Draw neural pathway visualization
        self.draw_neural_pathways(surface)
        
        # Draw contact lens structure
        pygame.draw.circle(surface, (200, 200, 255, 30), (self.x, self.y), self.radius, 2)
        
        # Draw triple polarization layers
        angles = self.get_triple_angles()
        colors = [NEURAL_BLUE, RETINA_ORANGE, MEDICAL_GREEN]
        
        for i, angle in enumerate(angles):
            layer_radius = self.radius - (i * 20)
            color = colors[i % len(colors)]
            
            # Draw polarization layer
            pygame.draw.circle(surface, color, (self.x, self.y), layer_radius, 1)
            
            # Draw polarization angle
            angle_rad = math.radians(angle)
            dx = math.cos(angle_rad) * layer_radius
            dy = math.sin(angle_rad) * layer_radius
            pygame.draw.line(surface, color, 
                            (self.x - dx/2, self.y - dy/2), 
                            (self.x + dx/2, self.y + dy/2), 2)
            
            # Draw angle label
            angle_text = font.render(f"{angle}°", True, color)
            surface.blit(angle_text, (self.x + dx/2 + 5, self.y + dy/2 - 5))
        
        # Draw retina density indicator
        density_radius = self.retina_density / 100 * (self.radius - 30)
        pygame.draw.circle(surface, RETINA_ORANGE, (self.x, self.y), int(density_radius), 2)
        
        # Draw neural status
        status_text = font.render(f"Retina: {self.retina_density}% | Neural: {self.neural_pathways}", True, NEURAL_BLUE)
        surface.blit(status_text, (self.x - 60, self.y + self.radius + 10))
    
    def draw_neural_pathways(self, surface):
        """Draw neural pathway simulation"""
        for i in range(8):
            angle = math.radians(i * 45)
            distance = self.radius + 50
            start_x = self.x + math.cos(angle) * self.radius
            start_y = self.y + math.sin(angle) * self.radius
            end_x = self.x + math.cos(angle) * distance
            end_y = self.y + math.sin(angle) * distance
            
            # Draw pulsating neural pathways
            pulse = math.sin(pygame.time.get_ticks() * 0.005 + i) * 0.5 + 0.5
            color = (100, 200, 255, int(150 * pulse))
            
            pygame.draw.line(surface, color, (start_x, start_y), (end_x, end_y), 2)
            
            # Draw neural endpoints
            pygame.draw.circle(surface, NEURAL_BLUE, (int(end_x), int(end_y)), 3)

class VisionEnhancementPanel:
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        
    def draw(self, surface, enhancer, material):
        pygame.draw.rect(surface, PANEL_BG, (self.x, self.y, self.width, self.height))
        pygame.draw.rect(surface, NEURAL_BLUE, (self.x, self.y, self.width, self.height), 2)
        
        title = header_font.render("LOW RETINA COUNT VISION ENHANCEMENT", True, RETINA_ORANGE)
        surface.blit(title, (self.x + 10, self.y + 15))
        
        # Calculate enhancement metrics
        improvement = enhancer.calculate_vision_improvement(material.polarization_efficiency)
        triple_angles = enhancer.get_triple_angles()
        
        y_offset = 45
        info_lines = [
            f"Retina Cell Density: {enhancer.retina_density}% of normal",
            f"Neural Pathways: {enhancer.neural_pathways}",
            f"Enhancement Mode: {enhancer.enhancement_mode}",
            f"Triple-Angle Output: {triple_angles[0]}° | {triple_angles[1]}° | {triple_angles[2]}°",
            f"Auto-rotation Speed: {enhancer.auto_rotation_speeds[enhancer.current_speed_index]:.1f}x",
            f"Vision Improvement: {improvement:.1f}%",
            f"Contrast Enhancement: {improvement * 0.8:.1f}%",
            f"Motion Detection: {improvement * 1.2:.1f}%",
            f"Neural Stimulation: {improvement * 1.5:.1f}%"
        ]
        
        for i, line in enumerate(info_lines):
            color = RETINA_ORANGE if i == 3 else NEURAL_BLUE if i in [0, 1, 2] else TEXT_COLOR
            surf = font.render(line, True, color)
            surface.blit(surf, (self.x + 15, self.y + y_offset + i * 18))
        
        # Draw enhancement graph
        self.draw_enhancement_graph(surface, enhancer, material, y_offset + 160)

    def draw_enhancement_graph(self, surface, enhancer, material, y_offset):
        # Draw graph background
        graph_width = self.width - 40
        graph_height = 80
        pygame.draw.rect(surface, (30, 45, 60), (self.x + 20, self.y + y_offset, graph_width, graph_height))
        
        # Draw enhancement levels
        modes = ["CONTRAST", "MOTION", "NEURAL", "EDGE"]
        improvements = [
            enhancer.calculate_vision_improvement(material.polarization_efficiency) * 0.8,
            enhancer.calculate_vision_improvement(material.polarization_efficiency) * 1.2,
            enhancer.calculate_vision_improvement(material.polarization_efficiency) * 1.5,
            enhancer.calculate_vision_improvement(material.polarization_efficiency) * 1.0
        ]
        
        bar_width = graph_width / len(modes) - 10
        
        for i, (mode, improvement) in enumerate(zip(modes, improvements)):
            bar_height = (improvement / 400) * graph_height
            color = RETINA_ORANGE if mode == "NEURAL" else NEURAL_BLUE
            
            bar_x = self.x + 30 + i * (bar_width + 10)
            bar_y = self.y + y_offset + graph_height - bar_height
            
            pygame.draw.rect(surface, color, (bar_x, bar_y, bar_width, bar_height))
            
            # Draw mode label
            mode_text = font.render(mode, True, TEXT_COLOR)
            surface.blit(mode_text, (bar_x, self.y + y_offset + graph_height + 5))
            
            # Draw improvement value
            value_text = font.render(f"{improvement:.0f}%", True, color)
            surface.blit(value_text, (bar_x, bar_y - 15))

class ManufacturerPanel:
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.selected_manufacturer = "Johnson & Johnson Vision"
        self.buttons = {}
        
    def draw(self, surface):
        pygame.draw.rect(surface, PANEL_BG, (self.x, self.y, self.width, self.height))
        pygame.draw.rect(surface, MEDICAL_GREEN, (self.x, self.y, self.width, self.height), 2)
        
        title = header_font.render("MEDICAL MANUFACTURERS & SUPPLIERS", True, MEDICAL_GREEN)
        surface.blit(title, (self.x + 10, self.y + 15))
        
        y_offset = 45
        self.buttons.clear()
        
        for i, (name, info) in enumerate(MANUFACTURERS.items()):
            # Draw manufacturer button
            button_rect = pygame.Rect(self.x + 20, self.y + y_offset + i * 60, self.width - 40, 50)
            is_selected = (name == self.selected_manufacturer)
            color = MEDICAL_GREEN if is_selected else NEURAL_BLUE
            
            pygame.draw.rect(surface, (40, 60, 80) if is_selected else (30, 45, 60), button_rect)
            pygame.draw.rect(surface, color, button_rect, 2)
            
            # Draw manufacturer info
            name_text = title_font.render(name, True, color)
            surface.blit(name_text, (self.x + 30, self.y + y_offset + i * 60 + 8))
            
            specialty_text = font.render(f"Specialty: {info['specialty']}", True, TEXT_COLOR)
            surface.blit(specialty_text, (self.x + 30, self.y + y_offset + i * 60 + 28))
            
            self.buttons[name] = button_rect
            
        # Draw contact info for selected manufacturer
        if self.selected_manufacturer in MANUFACTURERS:
            info = MANUFACTURERS[self.selected_manufacturer]
            contact_y = self.y + self.height - 80
            
            contact_text = [
                f"Selected: {self.selected_manufacturer}",
                f"Materials: {', '.join(info['materials'])}",
                f"Contact: {info['contact']}",
                "Click to visit website →"
            ]
            
            for i, text in enumerate(contact_text):
                surf = font.render(text, True, MEDICAL_GREEN if i == 0 else TEXT_COLOR)
                surface.blit(surf, (self.x + 20, contact_y + i * 16))

class TripleAngleControl:
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.angles = [0, 120, 240]
        
    def draw(self, surface, enhancer):
        pygame.draw.rect(surface, PANEL_BG, (self.x, self.y, self.width, self.height))
        pygame.draw.rect(surface, RETINA_ORANGE, (self.x, self.y, self.width, self.height), 2)
        
        title = header_font.render("TRIPLE-ANGLE ROTATION CONTROL", True, RETINA_ORANGE)
        surface.blit(title, (self.x + 10, self.y + 15))
        
        # Draw angle visualization
        center_x, center_y = self.x + self.width // 2, self.y + 80
        radius = 40
        
        # Draw circle
        pygame.draw.circle(surface, (40, 60, 80), (center_x, center_y), radius, 2)
        
        # Draw three angles
        colors = [NEURAL_BLUE, RETINA_ORANGE, MEDICAL_GREEN]
        angles = enhancer.get_triple_angles()
        
        for i, angle in enumerate(angles):
            angle_rad = math.radians(angle)
            end_x = center_x + math.cos(angle_rad) * radius
            end_y = center_y + math.sin(angle_rad) * radius
            
            pygame.draw.line(surface, colors[i], (center_x, center_y), (end_x, end_y), 3)
            
            # Draw angle label
            label_text = font.render(f"{angle}°", True, colors[i])
            surface.blit(label_text, (end_x + 5, end_y - 5))
        
        # Draw auto-rotation controls
        y_offset = 130
        speed_controls = [
            f"Auto-rotation: {'ENABLED' if enhancer.auto_rotation_speeds[enhancer.current_speed_index] > 0 else 'DISABLED'}",
            f"Speed: {enhancer.auto_rotation_speeds[enhancer.current_speed_index]:.1f}x",
            "Controls: 1=Slow, 2=Medium, 3=Fast, 0=Off",
            "Modes: C=Contrast, M=Motion, N=Neural, E=Edge"
        ]
        
        for i, text in enumerate(speed_controls):
            surf = font.render(text, True, TEXT_COLOR)
            surface.blit(surf, (self.x + 15, self.y + y_offset + i * 18))

def main():
    clock = pygame.time.Clock()
    
    # Create vision enhancer
    vision_enhancer = LowRetinaVisionEnhancer(CENTER_X, CENTER_Y + 50, 80)
    
    # Create panels
    enhancement_panel = VisionEnhancementPanel(20, 20, 450, 300)
    manufacturer_panel = ManufacturerPanel(20, 340, 450, 350)
    angle_control = TripleAngleControl(20, 710, 450, 150)
    
    # Create sliders
    sliders = [
        Slider(500, 800, 400, "Retina Density (%)", 5, 100, vision_enhancer.retina_density),
        Slider(500, 840, 400, "Neural Amplification", 1, 5, 3),
        Slider(500, 880, 400, "Polarization Intensity", 50, 100, 85)
    ]
    
    # Biomedical material
    class Material:
        def __init__(self):
            self.polarization_efficiency = 0.95
            self.name = "Neural-Enhanced Hydrogel"
    
    material = Material()
    
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == QUIT:
                running = False
                
            elif event.type == KEYDOWN:
                # Speed controls
                if event.key == K_1:
                    vision_enhancer.current_speed_index = 0  # Slow
                elif event.key == K_2:
                    vision_enhancer.current_speed_index = 1  # Medium
                elif event.key == K_3:
                    vision_enhancer.current_speed_index = 2  # Fast
                elif event.key == K_0:
                    vision_enhancer.auto_rotation_speeds[vision_enhancer.current_speed_index] = 0
                    
                # Enhancement modes
                elif event.key == K_c:
                    vision_enhancer.enhancement_mode = "CONTRAST_ENHANCEMENT"
                elif event.key == K_m:
                    vision_enhancer.enhancement_mode = "MOTION_DETECTION"
                elif event.key == K_n:
                    vision_enhancer.enhancement_mode = "NEURAL_STIMULATION"
                elif event.key == K_e:
                    vision_enhancer.enhancement_mode = "EDGE_DETECTION"
                    
                # Manufacturer website links
                elif event.key == K_j:
                    webbrowser.open(MANUFACTURERS["Johnson & Johnson Vision"]["url"])
                elif event.key == K_a:
                    webbrowser.open(MANUFACTURERS["Alcon Laboratories"]["url"])
                elif event.key == K_b:
                    webbrowser.open(MANUFACTURERS["Bausch + Lomb"]["url"])
                    
            elif event.type == MOUSEBUTTONDOWN:
                # Check manufacturer button clicks
                for name, rect in manufacturer_panel.buttons.items():
                    if rect.collidepoint(event.pos):
                        manufacturer_panel.selected_manufacturer = name
                        webbrowser.open(MANUFACTURERS[name]["url"])
        
        # Update retina density from slider
        vision_enhancer.retina_density = sliders[0].value
        
        screen.fill(BACKGROUND)
        
        # Draw vision enhancer
        vision_enhancer.draw(screen)
        
        # Draw panels
        enhancement_panel.draw(screen, vision_enhancer, material)
        manufacturer_panel.draw(screen)
        angle_control.draw(screen, vision_enhancer)
        
        # Draw sliders
        for slider in sliders:
            slider.draw(screen)
        
        # Draw instructions
        instructions = [
            "VISION ENHANCEMENT FOR LOW RETINA COUNT (OPTICAL NERVE INTACT)",
            "KEY CONTROLS: 1/2/3/0=Speed | C/M/N/E=Enhancement Modes | J/A/B=Manufacturer Websites",
            "NEURAL PATHWAYS: Triple-angle polarization stimulates intact optical nerves",
            "OUTPUT: Three optimized angles simultaneously enhance different vision aspects"
        ]
        
        for i, text in enumerate(instructions):
            color = RETINA_ORANGE if i == 0 else NEURAL_BLUE if i == 2 else TEXT_COLOR
            surf = font.render(text, True, color)
            screen.blit(surf, (500, 20 + i * 20))
        
        # Draw real-time angle output
        angles = vision_enhancer.get_triple_angles()
        angle_text = title_font.render(
            f"ACTIVE ANGLES: {angles[0]}° (Contrast) | {angles[1]}° (Motion) | {angles[2]}° (Neural)", 
            True, MEDICAL_GREEN
        )
        screen.blit(angle_text, (500, 100))
        
        pygame.display.flip()
        clock.tick(60)
    
    pygame.quit()
    sys.exit()

class Slider:
    def __init__(self, x, y, width, label, min_val=0, max_val=100, initial=50):
        self.x = x
        self.y = y
        self.width = width
        self.height = 20
        self.label = label
        self.min = min_val
        self.max = max_val
        self.value = initial
        self.dragging = False
        
    def draw(self, surface):
        pygame.draw.rect(surface, PANEL_BG, (self.x, self.y, self.width, self.height))
        pygame.draw.rect(surface, HIGHLIGHT, (self.x, self.y, self.width, self.height), 1)
        
        handle_x = self.x + (self.value - self.min) / (self.max - self.min) * self.width
        pygame.draw.circle(surface, HIGHLIGHT, (int(handle_x), self.y + self.height // 2), 8)
        
        label_text = font.render(f"{self.label}: {self.value:.1f}", True, TEXT_COLOR)
        surface.blit(label_text, (self.x, self.y - 20))

if __name__ == "__main__":
    main()
